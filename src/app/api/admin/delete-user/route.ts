import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'

export async function POST(request: NextRequest) {
  try {
    const { userId } = await request.json()
    
    console.log('üîç DELETE USER API - Iniciando processo')
    console.log('üìù userId recebido:', userId)
    
    if (!userId) {
      console.log('‚ùå Erro: userId n√£o fornecido')
      return NextResponse.json({ error: 'ID do usu√°rio √© obrigat√≥rio' }, { status: 400 })
    }
    
    const supabase = createClient()
    
    // Verificar se o usu√°rio atual √© admin
    const { data: { user }, error: authError } = await supabase.auth.getUser()
    
    console.log('üë§ Usu√°rio autenticado:', user?.id, user?.email)
    
    if (authError || !user) {
      console.log('‚ùå Erro de autentica√ß√£o:', authError)
      return NextResponse.json({ error: 'Usu√°rio n√£o autenticado' }, { status: 401 })
    }

    const { data: profile, error: profileError } = await supabase
      .from('users_profiles')
      .select('role')
      .eq('id', user.id)
      .single()

    console.log('üîê Perfil do usu√°rio atual:', profile, 'Erro:', profileError)

    if (profileError || !profile || profile.role !== 'admin') {
      console.log('‚ùå Usu√°rio n√£o √© admin')
      return NextResponse.json({ error: 'Apenas administradores podem excluir usu√°rios' }, { status: 403 })
    }

    // Permitir auto-exclus√£o (admin pode excluir a si mesmo se necess√°rio)
    // Comentado: if (userId === user.id) { return NextResponse.json({ error: 'Voc√™ n√£o pode excluir a si mesmo' }, { status: 400 }) }

    // Verificar se o usu√°rio a ser exclu√≠do existe
    console.log('üîç Buscando usu√°rio alvo com ID:', userId)
    
    const { data: targetUser, error: targetError } = await supabase
      .from('users_profiles')
      .select('id, display_name')
      .eq('id', userId)
      .single()

    console.log('üéØ Usu√°rio alvo encontrado:', targetUser)
    console.log('‚ùå Erro na busca:', targetError)

    if (targetError || !targetUser) {
      console.log('‚ùå Usu√°rio n√£o encontrado na tabela users_profiles')
      
      // Buscar em auth.users para debug
      const { data: authUser, error: authUserError } = await supabase.auth.admin.getUserById(userId)
      console.log('üîç Usu√°rio em auth.users:', authUser, 'Erro:', authUserError)
      
      return NextResponse.json({ 
        error: 'Usu√°rio n√£o encontrado',
        debug: {
          userId,
          targetError: targetError?.message,
          authUserError: authUserError?.message
        }
      }, { status: 404 })
    }

    // Excluir o perfil do usu√°rio (CASCADE remove dados relacionados)
    console.log('üóëÔ∏è Iniciando exclus√£o do usu√°rio:', userId)
    
    const { error: deleteError } = await supabase
      .from('users_profiles')
      .delete()
      .eq('id', userId)

    if (deleteError) {
      console.error('‚ùå Erro ao excluir usu√°rio:', deleteError)
      return NextResponse.json({ error: 'Erro ao excluir usu√°rio: ' + deleteError.message }, { status: 500 })
    }
    
    console.log(`‚úÖ Usu√°rio ${targetUser.display_name || userId} exclu√≠do com sucesso por admin ${user.id}`)
    
    return NextResponse.json({ 
      success: true, 
      message: `Usu√°rio ${targetUser.display_name || userId} exclu√≠do com sucesso`,
      userId: userId
    })
    
  } catch (error) {
    console.error('üí• Erro geral na API de exclus√£o de usu√°rio:', error)
    return NextResponse.json({ error: 'Erro interno do servidor' }, { status: 500 })
  }
}
